1) Что есть "состояние гонки" и к чему оно может привести?
Состояние гонки -- конкуренция за выполнение задачи первым. Конфликт "писателя" и "читателя". Когда один что-то меняет в коде, другой также приносит какие-то изменения. 
Это может создать неопредленное состояние и затормозить работу программы.
2) Как используются мьютексы и условные переменные?
mutex - mutual exclusion - lock - эксклюзивный доступ к данным, unlock - освобождает данные. Читатель ждет пока писатель сделает unlock.
"lock, unlock" - как идиома RAII
 condition_variable - notify, wait - удобно для очереди задач. Пассивное ожидание без нагрузки процессора. 
Относится к событийно- ориентированному программированию
условная переменная - способ многоразового ожидания события 
3) На что влияет выбор гранулярности блокировки?
гранулярность блокировки(мелкость разбиения) 
Мелко-гранулярная блокировка позволяет использовать несколько mutex одновременно. Но это может привести к deadlock.
4)Когда возникает взаимоблокировка и как ее предотвратить?
поток A идет слева направо
поток B идет справа налево
блокируют друг друга - deadlock
Решение :
std::locked/scoped_lock - блокируют все пакетом
timed_mutex - проверка + ожидание
захват mutex в одинаковом порядке
приоритеты для mutex(hierarchical)
recursive
5)Что есть атомарная операция и атомарный тип данных?
транзакционное выполнение операций - либо полностью, либо никак
std::atomic <Node*>
атомарные указатели - минимальная гранулярность блокировки, нельзя разделить
упорядочивание
std::atomic<int>
std::atomic<bool>

